namespace Packt.Shared
{
    public partial class Person
    {
        // a property defined using C# 1-5 syntax
        public string Origin
        {
            get
            {
                return $"{Name} was born on {HomePlanet}";
            }
        }
        // two properties defined using C# 6+ lambda expression syntax
        public string Greeting => $"{Name} says 'Hello!'";
        public int Age => System.DateTime.Today.Year - DateOfBirth.Year;
        public string FavoriteIceCream { get; set; } // auto-syntax
        private string favoritePrimaryColor;
        public string FavoritePrimaryColor
        {
            get
            {
                return favoritePrimaryColor;
            }
            set
            {
                switch (value.ToLower())
                {
                    case "red":
                    case "green":
                    case "blue":
                        favoritePrimaryColor = value;
                        break;
                    default:
                        throw new System.ArgumentException($"{value} is not a primary color. " + "Choose from : red, green, blue.");
                }
            }
        }
        // indexers
        public Person this[int index]
        {
            get
            {
                return Children[index];
            }
            set
            {
                Children[index] = value;
            }
        }
    }
}
/*
------------
Exercises
------------

1. What are the six access modifiers and what do they do? A: public, private, internal, protected, internal protected, private protected
2. What is the difference between the static, const, and readonly keywords? A: Static is a field that only has one value shared across all instances. const is a field that has a constant value at all times once compiled and can only be a literal string, Boolean, or number value. readonly can be calculated at runtime making it more versatile, and can be expressed using any executable statement, aka a live reference
3. What does a constructor do? A: Initializes and constructs the object in memory at compile time
4. Why should you apply the [Flags] attribute to an enum type when you want to store combined values? A: In order to reduce the memory requirements, you can specify byte, short, int, and long to select the amount of stored combinations you need.
5. Why is the partial keyword useful? A: Break up long and complicated classes, or have classes with one set of data autogenerated, and one manually edited.
6. What is a tuple? A: A method that has multiple return values that can be any type, named or not.
7. What does the C# ref keyword do? A: when a parameter is passed into a method, it can be passed by reference, or ref. ref will check the initial value of the parameter being passed in, modify it, then return the new value.
8. What does overloading mean? A: When a method has two or more different signatures, it is considered overloaded, and the output can be adjusted based on what is passed in the params. ie default vs (string: "Zack")
9. What is the difference between a field and a property? A: A property exposes a field, and allows for functional programming to be done on the field, instead of it being static and referenced to the whole program by a class
10. How do you make a method parameter optional? A: Assigning a default value inside the method parameter list. Optional params must come last in the list.

*/
