using System;
using static System.Console;

namespace Exercises
{
    public abstract class Shape
    {
        protected double height;
        protected double width;
        public virtual double Height
        {
            get
            {
                return height;
            }
            set
            {
                height = value;
            }
        }

        public virtual double Width
        {
            get
            {
                return width;
            }
            set
            {
                width = value;
            }
        }
        public abstract double Area { get; }
    }

    public class Rectangle : Shape
    {
        public Rectangle() { }
        public Rectangle(double height, double width)
        {
            this.height = height;
            this.Width = width;
        }

        public override double Area
        {
            get
            {
                return height * width;
            }
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            var r = new Rectangle(3, 4.5);
            WriteLine($"Rectangle H: {r.Height}, W: {r.Width}, Area: { r.Area}");
            //var s = new Square(5);
            //WriteLine($"Square H: {s.Height}, W: {s.Width}, Area: { s.Area}");
            //var c = new Circle(2.5);
            //WriteLine($"Circle H: {c.Height}, W: {c.Width}, Area: { c.Area}");
        }
    }
}

/*
------- 5.1 Q&A -------
1. What are the six access modifiers and what do they do? A: public, private, internal, protected, internal protected, private protected
2. What is the difference between the static, const, and readonly keywords? A: Static is a field that only has one value shared across all instances. const is a field that has a constant value at all times once compiled and can only be a literal string, Boolean, or number value. readonly can be calculated at runtime making it more versatile, and can be expressed using any executable statement, aka a live reference
3. What does a constructor do? A: Initializes and constructs the object in memory at compile time
4. Why should you apply the [Flags] attribute to an enum type when you want to store combined values? A: In order to reduce the memory requirements, you can specify byte, short, int, and long to select the amount of stored combinations you need.
5. Why is the partial keyword useful? A: Break up long and complicated classes, or have classes with one set of data autogenerated, and one manually edited.
6. What is a tuple? A: A method that has multiple return values that can be any type, named or not.
7. What does the C# ref keyword do? A: when a parameter is passed into a method, it can be passed by reference, or ref. ref will check the initial value of the parameter being passed in, modify it, then return the new value.
8. What does overloading mean? A: When a method has two or more different signatures, it is considered overloaded, and the output can be adjusted based on what is passed in the params. ie default vs (string: "Zack")
9. What is the difference between a field and a property? A: A property exposes a field, and allows for functional programming to be done on the field, instead of it being static and referenced to the whole program by a class
10. How do you make a method parameter optional? A: Assigning a default value inside the method parameter list. Optional params must come last in the list.


------- 6.1 Q&A -------
1. What is a delegate? A: A way to call or execute a method indirectly using a delegate with a matching signature, creating flexibility when calling  methods
2. What is an event? A: Actions that happen to an object, i.e. a button has a click event that can occur on it.
3. How are a base class and a derived class related? A: A base class can define a series of methods or objects that a derived class can use through inheritance, the base class may have more complexity or specificity related to what is happening to the components provided by the base class.
4. What is the difference between is and as operators? A: 'is' is a way to check if a cast is the same type, and will throw an exception if not. 'as' will return null is the type cannot be cast.
5. Which keyword is used to prevent a class from being derived from,
or a method from being further overridden? A: sealed
6. Which keyword is used to prevent a class from being instantiated with the
new keyword? A: static
7. Which keyword is used to allow a member to be overridden? A: virtual
8. What's the difference between a destructor and a deconstruct method? A: A destructor releases resources, or destroys the object. A deconstruct method returns an object split up into its constituent parts and uses the C# deconstruction syntax, such as storing the two return values in a tuple, or desconstructing the value into two separate variables.
9. What are the signatures of the constructors that all exceptions should
have? A: Exception() : base() {}, Exception(type method) : base(method) {}, Exception(type method, Exception ex) : base(method, ex) {}
10. What is an extension method and how do you define one? A: A way to reuse functionality between methods; adding 'static' modifier before the class, and adding 'this' before the type declaration will tell the compiler to treat is the method as one that extends the type declared in the methods parameters



*/
